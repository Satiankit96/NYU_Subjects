Script started on Sun 20 Nov 2022 08:43:33 PM EST
]0;aj3186@access2:~/ADB/AQuery2[?1034h[aj3186@access2 AQuery2]$ python3 ./prompt.py
[?1034hThread pool started with 4 threads;
Dbg: Getting col %2, type: monetdbe_str
**** WELCOME TO AQUERY++! ****
> stats on
> CREATE TABLE trade (stocksymbol INT, time INT, quantity INT, price INT)
> exec
QCREATE TABLE IF NOT EXISTS trade(stocksymbol INT, time INT, quantity INT, price INT);
MonetDB Time: 0.0, PostProc Time: 0.0
MonetDB Time: 0.0, PostProc Time: 0.0
MonetDB Time: 0.000656755, PostProc Time: 0.0
Parse Time: 0.005242347717285156, Codegen Time: 0.0005929470062255859, Compile Time: 1.5020370483398438e-05, Execution Time: 0.0007717609405517578.
Total Time: 0.0066220760345458984
656755, 0> 
> LOAD DATA INFILE "trade.csv" INTO TABLE trade FIELDS TERMINATED BY ","
> exec
QCOPY OFFSET 2 INTO trade FROM  '/home/aj3186/ADB/AQuery2/trade.csv'  ON SERVER    USING DELIMITERS  ',';
MonetDB Time: 2.013654609, PostProc Time: 0.0
Parse Time: 0.002862691879272461, Codegen Time: 0.00043392181396484375, Compile Time: 2.2649765014648438e-05, Execution Time: 2.013932228088379.
Total Time: 2.017251491546631
2013654609, 0> 
> CREATE TABLE query_a AS SELECT stocksymbol, sum(quantity * price) / sum(quantity) as weighted_avg_price FROM trade GROUP BY stocksymbol
> exec
QSELECT stocksymbol, (SUM((quantity * price)) / SUM(quantity)) AS weighted_avg_price  FROM trade GROUP BY stocksymbol  ;
Pdll_41Bucm
g++-11.2 -include server/pch.hpp out.cpp libaquery.a -shared   -fPIC --std=c++1z -O3 -DNDEBUG -fno-stack-protector  -fno-semantic-interposition -march=native  -DTHREADING -D__AQUERY_ITC_USE_SEMPH__  -I/home/aj3186/ADB/centos/usr/include/monetdb/ -I/usr/local/include/monetdb -I/usr/include/monetdb   -flto -s  -L/home/aj3186/ADB/centos/usr/lib64 -lmonetdbe -o dll.so
Dbg: Getting col stocksymbol, type: monetdbe_int32_t
Dbg: Getting col stocksymbol, type: monetdbe_int32_t
Dbg: Getting col weighted_avg_price, type: monetdbe_int128_t
Dbg: Getting col weighted_avg_price, type: monetdbe_int128_t
getcols...
getcols done
create table...
CREATE TABLE IF NOT EXISTS query_a (stocksymbol INT, weighted_avg_price HUGEINT) 
done.
MonetDB Time: 0.201589974, PostProc Time: 0.001517887
Parse Time: 0.01673436164855957, Codegen Time: 0.006642580032348633, Compile Time: 0.5566391944885254, Execution Time: 0.20505690574645996.
Total Time: 0.7850730419158936
201589974, 1517887> 
> CREATE TABLE query_b AS SELECT stocksymbol, avgs(10, price) as unweighted_moving_avgs_price FROM trade ASSUMING ASC time GROUP BY stocksymbol
> exec
QSELECT stocksymbol, price  FROM trade ORDER BY time  ;
Pdll_452NOc
g++-11.2 -include server/pch.hpp out.cpp libaquery.a -shared   -fPIC --std=c++1z -O3 -DNDEBUG -fno-stack-protector  -fno-semantic-interposition -march=native  -DTHREADING -D__AQUERY_ITC_USE_SEMPH__  -I/home/aj3186/ADB/centos/usr/include/monetdb/ -I/usr/local/include/monetdb -I/usr/include/monetdb   -flto -s  -L/home/aj3186/ADB/centos/usr/lib64 -lmonetdbe -o dll.so
Dbg: Getting col stocksymbol, type: monetdbe_int32_t
Dbg: Getting col stocksymbol, type: monetdbe_int32_t
Dbg: Getting col price, type: monetdbe_int32_t
Dbg: Getting col price, type: monetdbe_int32_t
getcols...
getcols done
create table...
CREATE TABLE IF NOT EXISTS query_b (stocksymbol INT, unweighted_moving_avgs_price HUGEINT) 
done.
MonetDB Time: 0.257495497, PostProc Time: 0.82989912
Parse Time: 0.0057220458984375, Codegen Time: 0.022008180618286133, Compile Time: 0.7611417770385742, Execution Time: 1.088789939880371.
Total Time: 1.877661943435669
257495497, 829899120> 
> CREATE TABLE query_c AS SELECT stocksymbol, avgs(10, price*quantity) / avgs(10, quantity) as weighted_moving_avgs_price FROM trade ASSUMING ASC time GROUP BY stocksymbol
> exec
QSELECT stocksymbol, price, quantity  FROM trade ORDER BY time  ;
Pdll_5ZgyGB
g++-11.2 -include server/pch.hpp out.cpp libaquery.a -shared   -fPIC --std=c++1z -O3 -DNDEBUG -fno-stack-protector  -fno-semantic-interposition -march=native  -DTHREADING -D__AQUERY_ITC_USE_SEMPH__  -I/home/aj3186/ADB/centos/usr/include/monetdb/ -I/usr/local/include/monetdb -I/usr/include/monetdb   -flto -s  -L/home/aj3186/ADB/centos/usr/lib64 -lmonetdbe -o dll.so
Dbg: Getting col stocksymbol, type: monetdbe_int32_t
Dbg: Getting col stocksymbol, type: monetdbe_int32_t
Dbg: Getting col price, type: monetdbe_int32_t
Dbg: Getting col price, type: monetdbe_int32_t
Dbg: Getting col quantity, type: monetdbe_int32_t
Dbg: Getting col quantity, type: monetdbe_int32_t
getcols...
getcols done
create table...
CREATE TABLE IF NOT EXISTS query_c (stocksymbol INT, weighted_moving_avgs_price HUGEINT) 
done.
MonetDB Time: 0.275170074, PostProc Time: 1.17624616
Parse Time: 0.019063949584960938, Codegen Time: 0.006825923919677734, Compile Time: 0.9042298793792725, Execution Time: 1.453211784362793.
Total Time: 2.383331537246704
275170074, 1176246160> 
> CREATE TABLE query_d AS SELECT stocksymbol, max(price - mins(price)) as best_trade_profit FROM trade ASSUMING ASC time GROUP BY stocksymbol
> exec
QSELECT stocksymbol, price  FROM trade ORDER BY time  ;
Pdll_2aa7Ek
g++-11.2 -include server/pch.hpp out.cpp libaquery.a -shared   -fPIC --std=c++1z -O3 -DNDEBUG -fno-stack-protector  -fno-semantic-interposition -march=native  -DTHREADING -D__AQUERY_ITC_USE_SEMPH__  -I/home/aj3186/ADB/centos/usr/include/monetdb/ -I/usr/local/include/monetdb -I/usr/include/monetdb   -flto -s  -L/home/aj3186/ADB/centos/usr/lib64 -lmonetdbe -o dll.so
Dbg: Getting col stocksymbol, type: monetdbe_int32_t
Dbg: Getting col stocksymbol, type: monetdbe_int32_t
Dbg: Getting col price, type: monetdbe_int32_t
Dbg: Getting col price, type: monetdbe_int32_t
getcols...
getcols done
create table...
CREATE TABLE IF NOT EXISTS query_d (stocksymbol INT, best_trade_profit INT) 
done.
MonetDB Time: 0.256306619, PostProc Time: 1.071840489
Parse Time: 0.012503862380981445, Codegen Time: 0.010190486907958984, Compile Time: 0.7416720390319824, Execution Time: 1.3359942436218262.
Total Time: 2.100360631942749
256306619, 1071840489> exit

Bye.
]0;aj3186@access2:~/ADB/AQuery2[aj3186@access2 AQuery2]$ exit
exit

Script done on Sun 20 Nov 2022 08:46:00 PM EST
